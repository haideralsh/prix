// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Belt_Float from "rescript/lib/es6/belt_Float.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";

var measurements_weight = {
  defaultValue: "g",
  units: [
    "mg",
    "g",
    "kg"
  ]
};

var measurements_volume = {
  defaultValue: "l",
  units: [
    "l",
    "ml"
  ]
};

var measurements_length = {
  defaultValue: "m",
  units: [
    "mm",
    "cm",
    "m"
  ]
};

var measurements = {
  weight: measurements_weight,
  volume: measurements_volume,
  length: measurements_length
};

function uom(measurement) {
  switch (measurement) {
    case "length" :
        return measurements_length.defaultValue;
    case "volume" :
        return measurements_volume.defaultValue;
    case "weight" :
        return measurements_weight.defaultValue;
    default:
      return "";
  }
}

function toFloat(stringNum) {
  return Belt_Option.getWithDefault(Belt_Float.fromString(stringNum), 0.0);
}

function toGrams(weight, from) {
  switch (from) {
    case "kg" :
        return weight * 1000.0;
    case "mg" :
        return weight / 1000.0;
    default:
      return weight;
  }
}

function toLiters(volume, from) {
  if (from === "ml") {
    return volume / 1000.0;
  } else {
    return volume;
  }
}

function toMeters(length, from) {
  switch (from) {
    case "cm" :
        return length / 100.0;
    case "mm" :
        return length / 1000.0;
    default:
      return length;
  }
}

function calculateCostPerUnitMeasurement(measurement, totalMeasurement, totalPrice, totalMeasurementUom, unitMeasurement, unitMeasurementUom) {
  var parsedTotalPrice = Belt_Option.getWithDefault(Belt_Float.fromString(totalPrice), 0.0);
  var convertedTotalMeasurement;
  switch (measurement) {
    case "length" :
        convertedTotalMeasurement = toMeters(Belt_Option.getWithDefault(Belt_Float.fromString(totalMeasurement), 0.0), totalMeasurementUom);
        break;
    case "volume" :
        convertedTotalMeasurement = toLiters(Belt_Option.getWithDefault(Belt_Float.fromString(totalMeasurement), 0.0), totalMeasurementUom);
        break;
    case "weight" :
        convertedTotalMeasurement = toGrams(Belt_Option.getWithDefault(Belt_Float.fromString(totalMeasurement), 0.0), totalMeasurementUom);
        break;
    default:
      convertedTotalMeasurement = 0.0;
  }
  var convertedUnitMeasurement;
  switch (measurement) {
    case "length" :
        convertedUnitMeasurement = toMeters(Belt_Option.getWithDefault(Belt_Float.fromString(unitMeasurement), 0.0), unitMeasurementUom);
        break;
    case "volume" :
        convertedUnitMeasurement = toLiters(Belt_Option.getWithDefault(Belt_Float.fromString(unitMeasurement), 0.0), unitMeasurementUom);
        break;
    case "weight" :
        convertedUnitMeasurement = toGrams(Belt_Option.getWithDefault(Belt_Float.fromString(unitMeasurement), 0.0), unitMeasurementUom);
        break;
    default:
      convertedUnitMeasurement = 0.0;
  }
  if (convertedTotalMeasurement !== 0.0) {
    if (convertedUnitMeasurement !== 0.0) {
      return parsedTotalPrice / (convertedTotalMeasurement / convertedUnitMeasurement);
    } else {
      return 0.0;
    }
  } else {
    return 0.0;
  }
}

export {
  measurements ,
  uom ,
  toFloat ,
  toGrams ,
  toLiters ,
  toMeters ,
  calculateCostPerUnitMeasurement ,
}
/* No side effect */
